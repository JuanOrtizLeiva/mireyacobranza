<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Analítico Profesional V2</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script> <script src="https://cdnjs.cloudflare.com/ajax/libs/date-fns/1.30.1/date_fns.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"></script>
    <style>
        :root {
            --primary: #0a3d62;
            --primary-light: #3c6382;
            --primary-dark: #0c2461;
            --secondary: #4a69bd;
            --accent: #f6b93b;
            --success: #2ecc71; /* Verde más estándar */
            --warning: #f39c12; /* Naranja más estándar */
            --danger: #e74c3c; /* Rojo más estándar */
            --light: #f8f9fa; /* Un gris muy claro */
            --dark: #343a40; /* Gris oscuro estándar */
            --gray-light: #dfe4ea;
            --gray: #ced6e0;
            --text-primary: #2c3e50;
            --text-secondary: #57606f;
            --shadow: 0 4px 12px rgba(0, 0, 0, 0.08); /* Sombra más suave */
            --transition: all 0.3s ease;
            --border-radius: 8px; /* Radio de borde consistente */
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--light);
            color: var(--text-primary);
            line-height: 1.6;
        }

        /* --- Login Styles --- */
        .login-container {
            max-width: 450px;
            margin: 80px auto; /* Reducido margen superior */
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 35px;
            transition: var(--transition);
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-15px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .login-logo {
            text-align: center;
            margin-bottom: 25px;
            color: var(--primary);
        }

        .login-header {
            text-align: center;
            margin-bottom: 35px;
        }

        .login-header h2 {
            font-size: 26px;
            color: var(--dark);
            margin-bottom: 10px;
            font-weight: 600;
        }

        .login-header p {
            color: var(--text-secondary);
            font-size: 15px;
        }

        .form-group {
            margin-bottom: 22px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            font-size: 14px;
        }

        .form-control {
            width: 100%;
            padding: 12px 15px;
            font-size: 15px;
            border: 1px solid var(--gray);
            border-radius: 6px;
            transition: var(--transition);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(10, 61, 98, 0.15);
        }

        .btn {
            display: inline-block;
            font-weight: 500;
            text-align: center;
            padding: 12px 25px; /* Mayor padding horizontal */
            font-size: 16px;
            border-radius: 6px; /* Borde estándar */
            border: none;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none; /* Para botones que sean links */
        }

        .btn i { /* Espacio entre icono y texto */
           margin-right: 8px;
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .btn-secondary {
            background-color: var(--secondary);
            color: white;
        }

        .btn-secondary:hover {
            background-color: #3c56a7;
            transform: translateY(-2px);
        }

        .btn-outline {
            background-color: transparent;
            border: 1px solid var(--primary);
            color: var(--primary);
        }

        .btn-outline:hover {
            background-color: var(--primary);
            color: white;
        }

         .btn-outline-secondary { /* Nuevo estilo */
            background-color: transparent;
            border: 1px solid var(--text-secondary);
            color: var(--text-secondary);
        }

        .btn-outline-secondary:hover {
            background-color: var(--text-secondary);
            color: white;
        }


        .btn-block {
            display: block;
            width: 100%;
        }

        .login-error {
            color: var(--danger);
            margin-top: 15px;
            font-size: 14px;
            text-align: center;
            font-weight: 500;
            min-height: 20px; /* Para evitar saltos */
        }

        .hidden {
            display: none !important;
        }

        /* --- Dashboard Styles --- */
        .dashboard {
            max-width: 1600px; /* Más ancho */
            margin: 0 auto;
            padding: 25px;
        }

        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 20px;
        }

        .dashboard-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--primary-dark);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .dashboard-title i {
            color: var(--accent);
        }

        .dashboard-controls {
            display: flex;
            gap: 12px;
        }

        .filter-container {
            display: flex;
            flex-wrap: wrap;
            gap: 18px;
            margin-bottom: 25px;
            padding: 20px;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
        }

        .filter-item {
            display: flex;
            flex-direction: column;
            min-width: 200px; /* Un poco más ancho */
            flex: 1;
            padding-bottom: 5px; /* Espacio inferior */
        }

        .filter-label {
            font-size: 13px;
            font-weight: 600;
            margin-bottom: 6px;
            color: var(--text-secondary);
        }

        .filter-select {
            padding: 9px 12px; /* Ajuste de padding */
            border-radius: 6px;
            border: 1px solid var(--gray);
            font-size: 14px;
            color: var(--text-primary);
            transition: var(--transition);
            background-color: white; /* Fondo blanco explícito */
        }

        /* Estilo básico para select múltiple */
        .filter-select[multiple] {
            min-height: 80px; /* Altura mínima para ver opciones */
            padding: 8px; /* Ajustar padding */
            overflow-y: auto; /* Scroll si hay muchas opciones */
        }
        .filter-select[multiple] option {
             padding: 5px 8px; /* Padding para opciones */
        }

        .filter-select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(10, 61, 98, 0.15);
        }

        .section {
            margin-bottom: 35px;
            animation: fadeIn 0.4s ease-out;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 18px;
        }

        .section-title {
            font-size: 1.35rem; /* Ligeramente más grande */
            font-weight: 600;
            color: var(--primary);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .section-title i {
            font-size: 1.1rem;
        }

        /* --- Stats Cards --- */
        .stats-container {
            display: grid;
             /* Permitir que las tarjetas crezcan hasta 1fr, mínimo 220px */
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 20px;
            margin-bottom: 35px;
        }

        .stat-card {
            background-color: white;
            padding: 20px;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            transition: var(--transition);
            position: relative;
            overflow: hidden;
            border-left: 4px solid var(--primary); /* Borde izquierdo distintivo */
        }

        /* Colores específicos para bordes de stat cards */
        .stat-card.bruto { border-left-color: var(--accent); }
        .stat-card.nc { border-left-color: var(--danger); }
        .stat-card.neto { border-left-color: var(--success); }
        .stat-card.promedio { border-left-color: var(--secondary); }
        .stat-card.facturado { border-left-color: var(--primary-light); } /* Añadido */


        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        }

        .stat-title {
            font-size: 14px;
            color: var(--text-secondary);
            margin-bottom: 6px;
            font-weight: 500;
            z-index: 2;
            position: relative;
        }

        .stat-value {
            font-size: 26px; /* Más grande */
            font-weight: 700;
            color: var(--primary-dark);
            margin-bottom: 6px;
            z-index: 2;
            position: relative;
            line-height: 1.2; /* Ajuste de línea */
        }

        .stat-subtitle {
            font-size: 13px; /* Más pequeño */
            color: var(--text-secondary);
            font-weight: 400;
            margin-bottom: 10px;
            z-index: 2;
            position: relative;
            min-height: 18px; /* Evita saltos si no hay subtítulo */
        }

        .stat-trend {
            display: flex;
            align-items: center;
            font-size: 13px;
            font-weight: 500;
            z-index: 2;
            position: relative;
        }

        .trend-up { color: var(--success); }
        .trend-down { color: var(--danger); }
        .trend-neutral { color: var(--text-secondary); }

        .trend-icon {
            margin-right: 6px;
        }

        .stat-icon {
            position: absolute;
            bottom: -10px; /* Ajustado */
            right: -10px; /* Ajustado */
            font-size: 60px; /* Ligeramente más pequeño */
            opacity: 0.08; /* Más sutil */
            color: var(--primary);
            z-index: 1;
            transform: rotate(-15deg); /* Rotación leve */
        }

        /* --- Charts Section --- */
        .chart-card {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 25px; /* Mayor padding */
            margin-bottom: 25px;
            transition: var(--transition);
        }

        .chart-card:hover {
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px; /* Más espacio */
            align-items: flex-start; /* Alinear al inicio */
            flex-wrap: wrap;
            gap: 10px;
        }

        .chart-title {
            font-size: 17px; /* Ligeramente más grande */
            font-weight: 600;
            color: var(--primary);
            margin-bottom: 4px; /* Espacio bajo título */
        }

        .chart-subtitle {
            font-size: 13px;
            color: var(--text-secondary);
            max-width: 90%; /* Ancho máximo */
        }

        .chart-action {
            color: var(--primary);
            background: none;
            border: none;
            cursor: pointer;
            font-size: 18px; /* Más grande */
            transition: var(--transition);
            padding: 5px; /* Área de click */
        }

        .chart-action:hover {
            color: var(--primary-dark);
            transform: scale(1.15); /* Mayor escala */
        }

        .chart-container {
            position: relative;
            height: 380px; /* Altura estándar */
            max-height: 380px;
        }

        .chart-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); /* Mínimo más grande */
            gap: 25px;
        }

        .chart-grid-item {
            min-width: 0; /* Necesario para grid */
        }

        /* --- Análisis Avanzado / Métricas Clave --- */
        .analysis-card {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 25px;
            margin-bottom: 25px;
            transition: var(--transition);
        }

        .analysis-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(230px, 1fr)); /* Ajuste minmax */
            gap: 20px;
        }

        .analysis-metric {
            background-color: var(--light); /* Fondo más claro */
            padding: 18px; /* Mayor padding */
            border-radius: 6px; /* Borde más suave */
            transition: var(--transition);
            border: 1px solid var(--gray-light); /* Borde sutil */
        }

        .analysis-metric:hover {
            background-color: #eef1f5; /* Cambio sutil al hover */
            transform: translateY(-3px);
            border-color: var(--gray);
        }

        .metric-title {
            font-size: 14px;
            font-weight: 600;
            color: var(--primary);
            margin-bottom: 8px; /* Más espacio */
        }

        .metric-value {
            font-size: 22px;
            font-weight: 700;
            color: var(--primary-dark);
            margin-bottom: 8px; /* Más espacio */
            line-height: 1.2;
        }
        .metric-value.trend-up { color: var(--success); } /* Aplicar color de tendencia */
        .metric-value.trend-down { color: var(--danger); }

        .metric-info {
            font-size: 13px;
            color: var(--text-secondary);
            line-height: 1.5; /* Mejor espaciado */
        }

        /* --- Top Clients Section --- */
        .clients-container {
            display: grid;
            /* Ajustar para que quepan bien 3 o se adapten */
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
        }

        .client-card {
            background-color: white;
            padding: 20px;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            position: relative;
            transition: var(--transition);
            overflow: hidden; /* Evitar desbordes */
            display: flex; /* Usar flexbox para mejor control */
            flex-direction: column;
        }

        .client-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 7px 15px rgba(0, 0, 0, 0.1);
        }

        .client-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start; /* Alinear arriba */
            margin-bottom: 10px;
        }

        .client-name {
            font-weight: 600;
            color: var(--primary-dark);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            flex-grow: 1; /* Ocupar espacio disponible */
            padding-right: 10px; /* Espacio para el rank */
            font-size: 16px; /* Ligeramente más grande */
        }

        .client-rank {
             /* Quitado position absolute */
            width: 28px;
            height: 28px;
            background-color: var(--accent);
            color: var(--dark);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 13px;
            font-weight: 700;
            flex-shrink: 0; /* Evitar que se encoja */
        }

        .client-info {
            font-size: 13px; /* Más pequeño */
            color: var(--text-secondary);
            margin-bottom: 12px; /* Más espacio */
        }

        .client-amount {
            font-size: 22px; /* Más grande */
            font-weight: 700;
            color: var(--primary);
            margin-top: auto; /* Empujar al fondo */
            margin-bottom: 8px; /* Espacio antes de barra */
        }

         .client-percentage { /* Nuevo */
             font-size: 13px;
             color: var(--text-secondary);
             margin-bottom: 10px;
         }

        .client-progress {
            height: 6px; /* Más gruesa */
            background-color: var(--gray-light);
            border-radius: 3px;
            overflow: hidden;
            margin-top: 5px;
        }

        .client-progress-bar {
            height: 100%;
            background-color: var(--primary);
            border-radius: 3px;
            transition: width 0.5s ease-out; /* Animación suave */
        }


        /* --- Table Section --- */
        .table-section {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 25px;
            margin-bottom: 25px;
            transition: var(--transition);
            overflow: hidden; /* Contener la tabla */
        }

        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px; /* Más espacio */
            flex-wrap: wrap;
            gap: 15px;
        }

        .table-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--primary);
        }

        .table-actions {
            display: flex;
            gap: 12px;
        }

        .table-container {
            overflow-x: auto; /* Scroll horizontal si es necesario */
            max-width: 100%;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            min-width: 800px; /* Ancho mínimo para evitar compresión excesiva */
        }

        .data-table th, .data-table td {
            padding: 14px 16px; /* Mayor padding */
            text-align: left;
            border-bottom: 1px solid var(--gray-light);
            white-space: nowrap; /* Evitar saltos de línea indeseados */
        }
         /* Alinear números a la derecha */
        .data-table th:nth-child(n+5), /* Desde Monto Neto */
        .data-table td:nth-child(n+5) {
            text-align: right;
        }
         /* Alinear cliente a la izquierda */
        .data-table th:nth-child(3),
        .data-table td:nth-child(3) {
             text-align: left;
        }
         /* Alinear RUT a la izquierda */
        .data-table th:nth-child(4),
        .data-table td:nth-child(4) {
             text-align: left;
        }


        .data-table th {
            background-color: #f8f9fa; /* Fondo suave para encabezado */
            font-weight: 600;
            color: var(--primary);
            position: sticky; /* Encabezado fijo al hacer scroll vertical */
            top: 0;
            z-index: 10; /* Asegurar que esté sobre el contenido */
            cursor: pointer;
            user-select: none;
            transition: background-color 0.2s ease;
        }

        .data-table th:hover {
            background-color: #e9ecef; /* Cambio al hover */
        }

        .data-table th i.fas { /* Icono de orden */
            margin-left: 8px;
            font-size: 12px;
            color: var(--gray);
            transition: color 0.2s ease;
        }
         .data-table th:hover i.fas {
             color: var(--primary);
         }
         .data-table th i.fa-sort-up,
         .data-table th i.fa-sort-down {
             color: var(--primary); /* Icono activo más visible */
         }


        .data-table tbody tr {
            transition: background-color 0.2s ease;
        }

        .data-table tbody tr:hover {
            background-color: rgba(10, 61, 98, 0.03); /* Hover muy sutil */
        }
         /* Estilo para filas de Notas de Crédito */
         .data-table tbody tr.nota-credito td {
            color: var(--danger); /* Texto rojo para NC */
            /* font-style: italic; */ /* Opcional: cursiva */
         }
          .data-table tbody tr.nota-credito:hover {
             background-color: rgba(231, 76, 60, 0.05); /* Hover rojo sutil */
          }


        /* --- Paginación --- */
        .pagination {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            margin-top: 20px;
            flex-wrap: wrap; /* Para pantallas pequeñas */
            gap: 5px;
        }

        .pagination-info { /* Nuevo para texto */
             margin-right: auto;
             font-size: 14px;
             color: var(--text-secondary);
             padding: 6px 0; /* Alinear verticalmente */
        }

        .page-btn {
            padding: 8px 14px; /* Ajuste padding */
            margin: 0 2px; /* Espacio reducido */
            background-color: white;
            border: 1px solid var(--gray);
            border-radius: 4px;
            cursor: pointer;
            transition: var(--transition);
            font-size: 14px;
            color: var(--primary);
        }

        .page-btn:hover:not(:disabled) {
            background-color: var(--gray-light);
            border-color: var(--gray);
        }

        .page-btn:disabled {
            cursor: not-allowed;
            opacity: 0.6;
            background-color: var(--light);
        }

        .active-page {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary);
            font-weight: 600;
        }
         .page-ellipsis { /* Nuevo para elipsis */
            padding: 8px 5px;
            color: var(--text-secondary);
         }

        /* --- Loader --- */
        .loader-container {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 40px; /* Más padding */
            min-height: 100px; /* Altura mínima */
        }

        .loader {
            border: 5px solid rgba(10, 61, 98, 0.1); /* Borde más grueso */
            border-radius: 50%;
            border-top: 5px solid var(--primary);
            width: 45px; /* Más grande */
            height: 45px; /* Más grande */
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* --- Toast Notification --- */
        .toast {
            position: fixed;
            bottom: 25px;
            right: 25px;
            background-color: var(--primary-dark); /* Color más oscuro */
            color: white;
            padding: 12px 22px; /* Mayor padding */
            border-radius: 6px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            z-index: 1050; /* Asegurar que esté encima de todo */
            transition: transform 0.4s ease, opacity 0.4s ease;
            transform: translateY(120px); /* Más abajo inicialmente */
            opacity: 0;
            font-size: 15px;
        }

        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }
         .toast.success { background-color: var(--success); color: white; }
         .toast.error { background-color: var(--danger); color: white; }
         .toast.warning { background-color: var(--warning); color: black; }


        /* --- Empty State --- */
        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 50px 20px; /* Mayor padding */
            text-align: center;
            width: 100%; /* Ocupar todo el ancho disponible (en tabla) */
        }

        .empty-icon {
            font-size: 54px; /* Icono más grande */
            color: var(--gray);
            margin-bottom: 20px;
        }

        .empty-title {
            font-size: 19px; /* Más grande */
            font-weight: 600;
            color: var(--text-secondary);
            margin-bottom: 12px;
        }

        .empty-message {
            color: var(--text-secondary);
            max-width: 450px; /* Ancho máximo */
            margin: 0 auto;
            font-size: 15px;
        }

        /* --- Utility Classes --- */
        .truncate-text {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 180px; /* Ajustar según necesidad */
            display: inline-block; /* Para que max-width funcione */
            vertical-align: middle; /* Alinear mejor */
        }

        /* --- Responsive Design --- */
        @media (max-width: 1200px) {
            .stats-container {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            }
            .clients-container {
                grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
            }
        }

        @media (max-width: 992px) {
            .chart-grid {
                grid-template-columns: 1fr; /* Gráficos uno debajo del otro */
            }
             .analysis-grid {
                 grid-template-columns: repeat(auto-fit, minmax(210px, 1fr));
             }
            .dashboard { padding: 20px; }
        }

        @media (max-width: 768px) {
            .stats-container {
                 /* 2 columnas en tablet */
                grid-template-columns: repeat(2, 1fr);
            }
            .filter-container {
                 /* Filtros en columna */
                flex-direction: column;
                align-items: stretch; /* Estirar items */
            }
            .filter-item {
                 /* Ancho completo para items de filtro */
                width: 100%;
                min-width: unset;
            }
            .dashboard-title {
                font-size: 1.6rem;
            }
             .clients-container {
                 /* 1 o 2 columnas */
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
             }
            .chart-container { height: 350px; } /* Reducir altura de gráficos */
            .pagination { justify-content: center; } /* Centrar paginación */
            .pagination-info { display: none; } /* Ocultar texto en móvil */
        }

        @media (max-width: 576px) {
            .stats-container {
                grid-template-columns: 1fr; /* 1 columna en móvil */
            }
            .dashboard-header {
                 /* Título y controles en columna */
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            .dashboard-controls {
                 /* Botones ocupan ancho */
                width: 100%;
                justify-content: flex-start; /* Alinear al inicio */
            }
            .btn {
                 /* Botones más pequeños */
                padding: 10px 18px;
                font-size: 15px;
            }
            .chart-container { height: 300px; }
             .clients-container {
                 grid-template-columns: 1fr; /* 1 columna para clientes */
             }
             .table-actions {
                 width: 100%;
                 justify-content: flex-end;
             }
            .data-table th, .data-table td {
                 padding: 10px 12px; /* Menos padding en tabla */
            }
        }

    </style>
</head>
<body>
    <div id="login-section">
        <div class="login-container">
            <div class="login-logo">
                <i class="fas fa-chart-pie fa-3x"></i>
            </div>
            <div class="login-header">
                <h2>Sistema Analítico de Facturación</h2>
                <p>Analice sus datos financieros con precisión</p>
            </div>
            <form id="login-form">
                <div class="form-group">
                    <label for="username">Usuario</label>
                    <input type="text" id="username" class="form-control" required value="prueba"> </div>
                <div class="form-group">
                    <label for="password">Contraseña</label>
                    <input type="password" id="password" class="form-control" required value="123#"> </div>
                <button type="submit" class="btn btn-primary btn-block">
                    <i class="fas fa-sign-in-alt"></i> Ingresar al Sistema
                </button>
                <div id="login-error" class="login-error"></div>
            </form>
        </div>
    </div>

    <div id="main-content" class="hidden">
        <div class="dashboard">
            <div class="dashboard-header">
                <h1 class="dashboard-title"><i class="fas fa-chart-line"></i> Analytics Financiero</h1>
                <div class="dashboard-controls">
                    <button id="load-button" class="btn btn-primary">
                        <i class="fas fa-sync-alt"></i> Actualizar Datos
                    </button>
                </div>
            </div>

            <div class="filter-container">
                <div class="filter-item">
                    <span class="filter-label">Año(s)</span>
                     <select id="year-filter" class="filter-select" multiple>
                        <option value="all" disabled>Cargando años...</option>
                    </select>
                </div>
                <div class="filter-item">
                    <span class="filter-label">Mes(es)</span>
                     <select id="month-filter" class="filter-select" multiple>
                        <option value="01">Enero</option>
                        <option value="02">Febrero</option>
                        <option value="03">Marzo</option>
                        <option value="04">Abril</option>
                        <option value="05">Mayo</option>
                        <option value="06">Junio</option>
                        <option value="07">Julio</option>
                        <option value="08">Agosto</option>
                        <option value="09">Septiembre</option>
                        <option value="10">Octubre</option>
                        <option value="11">Noviembre</option>
                        <option value="12">Diciembre</option>
                    </select>
                </div>
                <div class="filter-item">
                    <span class="filter-label">Cliente</span>
                    <select id="client-filter" class="filter-select">
                         <option value="all">Todos los clientes</option>
                        </select>
                </div>
                <div class="filter-item">
                     <span class="filter-label">&nbsp;</span> <button id="reset-filters" class="btn btn-outline-secondary btn-block">
                        <i class="fas fa-times"></i> Limpiar Filtros
                    </button>
                </div>
            </div>

            <div id="loading-message" class="loader-container hidden">
                <div class="loader"></div>
            </div>
            <div id="error-message" class="login-error" style="margin-bottom: 20px;"></div> <div id="stats-section"> <div class="stats-container">
                    <div class="stat-card bruto">
                        <div class="stat-title">Ventas Brutas</div>
                        <div id="total-bruto" class="stat-value">$0</div>
                        <div id="total-bruto-subtitle" class="stat-subtitle">(Neto+Exento+IVA) - Total NC</div>
                        <i class="fas fa-cash-register stat-icon"></i>
                    </div>
                     <div class="stat-card neto">
                        <div class="stat-title">Ventas Netas</div>
                        <div id="total-neto-calc" class="stat-value">$0</div> <div id="total-neto-calc-subtitle" class="stat-subtitle">(Neto+Exento) - (Neto+Exento NC)</div>
                         <i class="fas fa-balance-scale-right stat-icon"></i>
                    </div>
                    <div class="stat-card facturado">
                        <div class="stat-title">Total Documentos Venta</div>
                        <div id="total-facturado" class="stat-value">$0</div>
                        <div id="total-facturado-subtitle" class="stat-subtitle">0 documentos</div>
                        <i class="fas fa-file-invoice-dollar stat-icon"></i>
                    </div>
                    <div class="stat-card nc">
                        <div class="stat-title">Total Notas de Crédito</div>
                        <div id="total-nc" class="stat-value">$0</div>
                        <div id="total-nc-subtitle" class="stat-subtitle">0 documentos</div>
                         <i class="fas fa-file-medical stat-icon"></i>
                    </div>
                    <div class="stat-card promedio">
                        <div class="stat-title">Promedio Mensual (Vta. Neta)</div>
                        <div id="promedio-mensual" class="stat-value">$0</div>
                        <div id="promedio-mensual-subtitle" class="stat-subtitle">En 0 meses con actividad</div>
                         <i class="fas fa-calendar-alt stat-icon"></i>
                    </div>
                    <div class="stat-card" style="border-left-color: #9b59b6;"> <div class="stat-title">IVA Débito Fiscal</div>
                        <div id="total-iva-debito" class="stat-value">$0</div>
                        <div id="total-iva-debito-subtitle" class="stat-subtitle">IVA Facturas - IVA NC</div>
                         <i class="fas fa-percentage stat-icon"></i>
                    </div>
                </div>

                 <div id="monthly-comparison-section" class="section">
                    <div class="section-header">
                         <h2 class="section-title"><i class="fas fa-layer-group"></i> Comparativo Mensual por Año (Ventas Netas)</h2>
                    </div>
                    <div class="chart-card">
                         <div class="chart-header">
                             <div>
                                 <h3 class="chart-title">Ventas Netas Mensuales Agrupadas por Año</h3>
                                 <p class="chart-subtitle">Permite comparar el rendimiento mensual entre diferentes años.</p>
                             </div>
                         </div>
                        <div class="chart-container" style="height: 400px;"> <canvas id="monthlyComparisonChart"></canvas>
                        </div>
                    </div>
                </div>

                 <div class="section">
                    <div class="section-header">
                        <h2 class="section-title"><i class="fas fa-chart-line"></i> Evolución Temporal (Ventas Netas)</h2>
                    </div>
                    <div class="chart-card">
                         <div class="chart-header">
                             <div>
                                 <h3 class="chart-title">Tendencia de Ventas Netas</h3>
                                 <p class="chart-subtitle">Evolución de las ventas netas a lo largo del período seleccionado.</p>
                             </div>
                         </div>
                        <div class="chart-container">
                            <canvas id="salesTrendChart"></canvas> </div>
                    </div>
                </div>

                 <div class="section">
                     <div class="section-header">
                        <h2 class="section-title"><i class="fas fa-pie-chart"></i> Distribución y Promedios</h2>
                    </div>
                    <div class="chart-grid">
                        <div class="chart-grid-item">
                            <div class="chart-card">
                                <div class="chart-header">
                                    <h3 class="chart-title">Distribución por Cliente (Ventas Netas)</h3>
                                </div>
                                <div class="chart-container" style="height: 320px"> <canvas id="distributionChart"></canvas>
                                </div>
                            </div>
                        </div>
                        <div class="chart-grid-item">
                            <div class="chart-card">
                                <div class="chart-header">
                                    <h3 class="chart-title">Ventas Netas Anuales</h3>
                                </div>
                                <div class="chart-container" style="height: 320px"> <canvas id="yearlyTotalChart"></canvas> </div>
                            </div>
                        </div>
                    </div>

                     <div class="analysis-card" style="margin-top: 25px;">
                         <div class="chart-header">
                            <h3 class="chart-title">Métricas Clave Adicionales</h3>
                         </div>
                        <div class="analysis-grid" id="key-metrics-container">
                            <div class="empty-state" id="key-metrics-empty">
                                <div class="empty-icon"><i class="fas fa-calculator"></i></div>
                                <div class="empty-title">Calculando métricas...</div>
                            </div>
                        </div>
                     </div>
                </div>

                 <div class="section">
                     <div class="section-header">
                         <h2 class="section-title"><i class="fas fa-users"></i> Top Clientes por Ventas Netas</h2>
                     </div>
                    <div id="clients-container" class="clients-container">
                         <div class="empty-state" id="clients-empty">
                            <div class="empty-icon"><i class="fas fa-users"></i></div>
                            <div class="empty-title">Cargando clientes...</div>
                        </div>
                    </div>
                </div>

                <div class="section">
                     <div class="section-header">
                         <h2 class="section-title"><i class="fas fa-table"></i> Detalle de Documentos</h2>
                     </div>

                    <div class="table-section">
                        <div class="table-header">
                            <h3 class="table-title">Registro de Documentos Tributarios Electrónicos</h3>
                            <div class="table-actions">
                                <select id="table-page-size" class="filter-select" style="min-width: 150px;">
                                    <option value="10">10 por página</option>
                                    <option value="25">25 por página</option>
                                    <option value="50">50 por página</option>
                                    <option value="100">100 por página</option>
                                </select>
                                </div>
                        </div>
                        <div class="table-container">
                            <table class="data-table">
                                <thead>
                                    <tr>
                                        <th data-sort="fecha">Fecha <i class="fas fa-sort"></i></th>
                                        <th data-sort="tipoDocTexto">Tipo Doc <i class="fas fa-sort"></i></th>
                                        <th data-sort="folio">Folio <i class="fas fa-sort"></i></th>
                                        <th data-sort="rut">RUT <i class="fas fa-sort"></i></th> <th data-sort="razonSocial">Razón Social <i class="fas fa-sort"></i></th>
                                        <th data-sort="montoNeto">Neto <i class="fas fa-sort"></i></th>
                                        <th data-sort="montoExento">Exento <i class="fas fa-sort"></i></th>
                                        <th data-sort="montoIVA">IVA <i class="fas fa-sort"></i></th>
                                        <th data-sort="montoTotal">Total <i class="fas fa-sort"></i></th>
                                    </tr>
                                </thead>
                                <tbody id="invoice-table-body">
                                    <tr><td colspan="9"><div class="empty-state" id="table-empty">
                                        <div class="empty-icon"><i class="fas fa-table"></i></div>
                                        <div class="empty-title">Cargando documentos...</div>
                                    </div></td></tr>
                                </tbody>
                            </table>
                        </div>
                        <div id="pagination" class="pagination">
                            </div>
                    </div>
                </div>
            </div> </div>
    </div>

    <div id="toast" class="toast"></div> <script>
        // --- PARTE 1 DEL SCRIPT (Variables Globales y Setup Inicial) ---

        // Elementos del DOM
        const loginSection = document.getElementById('login-section');
        const mainContent = document.getElementById('main-content');
        const loginForm = document.getElementById('login-form');
        const loginError = document.getElementById('login-error');
        const loadButton = document.getElementById('load-button');
        const loadingMessage = document.getElementById('loading-message');
        const errorMessage = document.getElementById('error-message');
        const resetFiltersButton = document.getElementById('reset-filters');
        const statsSection = document.getElementById('stats-section'); // Contenedor principal de datos

        // Filtros
        const yearFilter = document.getElementById('year-filter');
        const monthFilter = document.getElementById('month-filter');
        const clientFilter = document.getElementById('client-filter');

        // Tabla y paginación
        const invoiceTableBody = document.getElementById('invoice-table-body');
        const pagination = document.getElementById('pagination');
        const tablePageSize = document.getElementById('table-page-size');
        const tableEmptyMessage = document.getElementById('table-empty');

        // Toast
        const toast = document.getElementById('toast');

        // Contenedores de datos específicos
        const clientsContainer = document.getElementById('clients-container');
        const clientsEmptyMessage = document.getElementById('clients-empty');
        const keyMetricsContainer = document.getElementById('key-metrics-container');
        const keyMetricsEmptyMessage = document.getElementById('key-metrics-empty');


        // Variables globales de estado
        let allData = []; // Todos los datos recibidos y procesados
        let filteredData = []; // Datos después de aplicar filtros
        let currentPage = 1;
        let rowsPerPage = 10; // Valor inicial
        let yearOptions = new Set();
        let clientOptions = {}; // Usar objeto para guardar { rut: nombre }
        let allPeriods = new Set(); // Guardará todos los YYYY-MM disponibles

        // Variables para gráficos (se inicializarán luego)
        let salesTrendChart;
        let distributionChart;
        let yearlyTotalChart;
        let monthlyComparisonChart; // Nuevo gráfico comparativo

        // Variables para ordenamiento de tabla
        let currentSortColumn = 'fecha'; // Columna inicial
        let currentSortDirection = 'desc'; // Dirección inicial

        // URL del flujo (confirmar si sigue siendo válida)
        const flowUrl = 'https://prod-77.westus.logic.azure.com:443/workflows/1ba29feb037d422bb281c8c8eacc4a04/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=9gjMKfE5XIxBTi-KNXDcatl3NXchpZN6eGq8xDgrM5g';

        // Constantes y configuraciones
        const IVA_RATE = 0.19; // Tasa de IVA estándar en Chile
        const MESES = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
        const DIAS_SEMANA = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];
        // Mapeo de códigos DTE comunes a texto legible
        const DTE_MAP = {
            33: 'Factura Electrónica',
            34: 'Factura Exenta Electrónica',
            39: 'Boleta Electrónica',
            41: 'Boleta Exenta Electrónica',
            43: 'Liquidación Factura Electrónica',
            46: 'Factura de Compra Electrónica',
            52: 'Guía de Despacho Electrónica',
            56: 'Nota de Débito Electrónica',
            61: 'Nota de Crédito Electrónica',
            110: 'Factura de Exportación Electrónica',
            111: 'Nota de Débito de Exportación Electrónica',
            112: 'Nota de Crédito de Exportación Electrónica'
            // Añadir más si son necesarios
        };

        // Formateadores (Intl para performance y localización)
        const currencyFormatter = new Intl.NumberFormat('es-CL', { style: 'currency', currency: 'CLP', maximumFractionDigits: 0 });
        const numberFormatter = new Intl.NumberFormat('es-CL', { maximumFractionDigits: 0 });
        const percentFormatter = new Intl.NumberFormat('es-CL', { style: 'percent', minimumFractionDigits: 1, maximumFractionDigits: 1 });

        // --- Funciones Helper ---
        function formatCurrency(value) {
            return currencyFormatter.format(value || 0);
        }
        function formatNumber(value) {
            return numberFormatter.format(value || 0);
        }
        function formatPercent(value) { // Asegurar que value sea un número decimal (e.g., 0.25 para 25%)
            return percentFormatter.format(value || 0);
        }

        // Función para truncar texto (mejorada)
        function truncateText(text, maxLength = 20) {
            if (typeof text !== 'string' || text.length === 0) return 'N/A';
            return text.length > maxLength ? text.substring(0, maxLength) + '…' : text;
        }

        // Función para mostrar notificación toast (mejorada con tipos)
        function showToast(message, type = 'info', duration = 3000) {
            toast.textContent = message;
            toast.className = 'toast'; // Reset classes
             // Añadir clase de tipo (info no tiene clase extra, usa el default)
            if (type === 'success' || type === 'error' || type === 'warning') {
                toast.classList.add(type);
            }
            toast.classList.add('show');

            setTimeout(() => {
                toast.classList.remove('show');
            }, duration);
        }

        // --- Lógica de Inicialización y Event Listeners ---

        // Listener para el formulario de login
        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            // Simulación simple de login
            if (username === 'prueba' && password === '123#') {
                loginSection.classList.add('hidden');
                mainContent.classList.remove('hidden');
                showToast('Login exitoso. Cargando datos...', 'success');
                fetchData(); // Cargar datos al ingresar
            } else {
                loginError.textContent = 'Usuario o contraseña incorrectos';
                loginError.style.animation = 'none'; // Reset animation
                setTimeout(() => loginError.style.animation = '', 10); // Reapply animation
                 showToast('Credenciales inválidas', 'error');
            }
        });

        // Listener para el botón de actualizar datos
        loadButton.addEventListener('click', fetchData);

        // Listeners para los filtros (cambiado a 'change')
        yearFilter.addEventListener('change', applyFilters);
        monthFilter.addEventListener('change', applyFilters);
        clientFilter.addEventListener('change', applyFilters);
        resetFiltersButton.addEventListener('click', resetFilters);

        // Listener para tamaño de página de la tabla
        tablePageSize.addEventListener('change', function() {
            rowsPerPage = parseInt(this.value, 10);
            currentPage = 1; // Reset a página 1
            updateTable();
        });

        // Listeners para ordenamiento de tabla (se añadirán dinámicamente)
        function setupTableSorting() {
             document.querySelectorAll('.data-table th[data-sort]').forEach(th => {
                // Remover listener anterior para evitar duplicados si se llama de nuevo
                th.removeEventListener('click', handleSortClick);
                // Añadir nuevo listener
                th.addEventListener('click', handleSortClick);
             });
        }

        function handleSortClick() {
            const column = this.getAttribute('data-sort');
            if (!column) return;

            if (currentSortColumn === column) {
                // Cambiar dirección
                currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                 // Nueva columna, ordenar ascendente por defecto (excepto fecha, que es mejor desc)
                currentSortColumn = column;
                currentSortDirection = (column === 'fecha') ? 'desc' : 'asc';
            }
            updateSortIcons();
            sortData(); // Reordenar filteredData
            updateTable(); // Redibujar tabla
        }

        // Actualizar iconos de ordenamiento
        function updateSortIcons() {
             document.querySelectorAll('.data-table th[data-sort] i.fas').forEach(icon => {
                icon.className = 'fas fa-sort'; // Reset a icono base
             });

             const currentHeader = document.querySelector(`.data-table th[data-sort="${currentSortColumn}"]`);
             if (currentHeader) {
                const icon = currentHeader.querySelector('i.fas');
                if (icon) {
                    icon.className = `fas fa-sort-${currentSortDirection === 'asc' ? 'up' : 'down'}`;
                }
             }
        }

         // Función para reiniciar filtros (mejorada)
        function resetFilters() {
            // Deseleccionar todos los años
            Array.from(yearFilter.options).forEach(option => option.selected = false);
            // Deseleccionar todos los meses
            Array.from(monthFilter.options).forEach(option => option.selected = false);
            // Seleccionar "Todos los clientes"
            clientFilter.value = 'all';

            applyFilters(); // Aplicar los filtros (que ahora estarán vacíos/all)
            showToast('Filtros reiniciados', 'info');
        }

        // --- Funciones Principales (fetchData, processData, applyFilters, updates...) ---
        // Estas funciones irán en las siguientes partes del script.

        // Inicialización al cargar la página
        document.addEventListener('DOMContentLoaded', () => {
            // Configurar Chart.js globalmente (opcional, pero útil)
             Chart.defaults.font.family = "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif";
             Chart.defaults.plugins.tooltip.backgroundColor = 'rgba(0, 0, 0, 0.7)';
             Chart.defaults.plugins.tooltip.titleFont = { weight: 'bold', size: 14 };
             Chart.defaults.plugins.tooltip.bodyFont = { size: 12 };
             Chart.defaults.plugins.tooltip.padding = 10;
             Chart.defaults.plugins.legend.position = 'bottom';
             Chart.defaults.plugins.legend.labels.boxWidth = 12;
             Chart.defaults.plugins.legend.labels.padding = 15;

             rowsPerPage = parseInt(tablePageSize.value, 10); // Leer valor inicial del selector
             updateSortIcons(); // Establecer icono de orden inicial
             setupTableSorting(); // Configurar listeners de ordenamiento
             // Opcional: Simular click en login si las credenciales están pre-rellenadas
             // if (document.getElementById('username').value && document.getElementById('password').value) {
             //     loginForm.requestSubmit();
             // }
        });

        // --- FIN DE PARTE 1 DEL SCRIPT ---
    </script>
    </body>
</html>

<script>
    // --- PARTE 1 DEL SCRIPT (Variables Globales y Setup Inicial) ---
    // ... (Código de la Parte 1 del script va aquí arriba) ...

    // --- Funciones Helper (Añadidas/Modificadas) ---

    // Función básica para validar formato RUT Chileno (NN.NNN.NNN-L)
    function validateRutCL(rut) {
        if (typeof rut !== 'string') return false;
        rut = rut.replace(/[^0-9kK]+/g, '').toUpperCase(); // Limpiar y capitalizar K
        if (rut.length < 2) return false; // Mínimo cuerpo + DV

        const body = rut.slice(0, -1);
        const dv = rut.slice(-1);

        if (!/^\d+$/.test(body) || !/^[0-9K]$/.test(dv)) return false; // Formato inválido

        // Cálculo del Dígito Verificador
        let sum = 0;
        let multiplier = 2;
        for (let i = body.length - 1; i >= 0; i--) {
            sum += parseInt(body[i], 10) * multiplier;
            multiplier = multiplier === 7 ? 2 : multiplier + 1;
        }
        const calculatedDv = 11 - (sum % 11);
        const expectedDv = (calculatedDv === 11) ? '0' : (calculatedDv === 10) ? 'K' : calculatedDv.toString();

        return dv === expectedDv;
    }

    // Función para formatear RUT Chileno (NN.NNN.NNN-L)
    function formatRutCL(rut) {
        if (!validateRutCL(rut)) return rut; // Devolver original si no es válido
        rut = rut.replace(/[^0-9kK]+/g, '').toUpperCase();
        const body = rut.slice(0, -1);
        const dv = rut.slice(-1);
        const formattedBody = body.replace(/\B(?=(\d{3})+(?!\d))/g, "."); // Añadir puntos
        return `${formattedBody}-${dv}`;
    }


     // --- Funciones Principales ---

     // Función para resetear la UI antes de cargar nuevos datos
    function resetUI() {
        errorMessage.textContent = '';
        errorMessage.classList.add('hidden'); // Ocultar contenedor de error
        statsSection.classList.add('hidden'); // Ocultar toda la sección de datos

        // Destruir gráficos existentes para evitar errores
        if (salesTrendChart) salesTrendChart.destroy();
        if (distributionChart) distributionChart.destroy();
        if (yearlyTotalChart) yearlyTotalChart.destroy();
        if (monthlyComparisonChart) monthlyComparisonChart.destroy();
        salesTrendChart = null;
        distributionChart = null;
        yearlyTotalChart = null;
        monthlyComparisonChart = null;


        // Limpiar contenedores de datos específicos mostrando mensaje de carga/vacío
        keyMetricsContainer.innerHTML = '';
        keyMetricsEmptyMessage.classList.remove('hidden');
        clientsContainer.innerHTML = '';
        clientsEmptyMessage.classList.remove('hidden');
        invoiceTableBody.innerHTML = `<tr><td colspan="9">${tableEmptyMessage.outerHTML}</td></tr>`; // Colspan ajustado a 9
        pagination.innerHTML = '';

        // Deshabilitar botón de carga temporalmente
        loadButton.disabled = true;
        loadButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Cargando...';
    }


    // Función principal para obtener datos
    async function fetchData() {
        resetUI(); // Limpiar UI y mostrar estado de carga inicial
        loadingMessage.classList.remove('hidden'); // Mostrar loader principal

        try {
            const response = await fetch(flowUrl, {
                method: 'POST', // Asumiendo POST, ajustar si es GET
                headers: {
                    'Content-Type': 'application/json'
                    // Añadir otros headers si son necesarios (ej. Auth)
                },
                // Body si es necesario para el request
                // body: JSON.stringify({ /* Payload si aplica */ })
            });

            if (!response.ok) {
                 const errorText = await response.text(); // Intentar leer cuerpo del error
                throw new Error(`Error HTTP ${response.status}: ${response.statusText}. ${errorText}`);
            }

            const rawData = await response.json();

            if (!Array.isArray(rawData)) {
                 // A veces la respuesta puede ser un objeto con una propiedad que contiene el array
                 if (typeof rawData === 'object' && rawData !== null) {
                     // Intentar encontrar una propiedad que sea un array (ej: 'value', 'd.results')
                     const arrayKey = Object.keys(rawData).find(key => Array.isArray(rawData[key]));
                     if (arrayKey) {
                         console.warn("La respuesta no era un array directamente, usando propiedad:", arrayKey);
                         allData = processData(rawData[arrayKey]); // Procesar el array encontrado
                     } else {
                         throw new Error('La respuesta no es un array y no se encontró una propiedad con array.');
                     }
                 } else {
                    throw new Error('La respuesta recibida no es un array procesable.');
                 }
            } else {
                 allData = processData(rawData); // Procesar el array directamente
            }


            if (allData.length === 0) {
                showToast('No se encontraron documentos en la fuente de datos.', 'warning');
                errorMessage.textContent = 'No se encontraron documentos.';
                errorMessage.classList.remove('hidden');
                // No ocultar el loader principal, ya que no hay datos que mostrar
            } else {
                updateFilterOptions(); // Actualizar filtros con los datos cargados
                applyFilters(); // Aplicar filtros y mostrar datos iniciales
                statsSection.classList.remove('hidden'); // Mostrar la sección de datos
                showToast(`Se cargaron ${allData.length} documentos.`, 'success');
            }

        } catch (error) {
            console.error('Error detallado al cargar datos:', error);
            errorMessage.textContent = `Error al cargar datos: ${error.message}`;
            errorMessage.classList.remove('hidden'); // Mostrar el error
            showToast('Error al cargar datos. Revise la consola para más detalles.', 'error', 5000);
            statsSection.classList.add('hidden'); // Ocultar sección de datos si hay error
        } finally {
            loadingMessage.classList.add('hidden'); // Ocultar loader principal
            loadButton.disabled = false; // Reactivar botón
            loadButton.innerHTML = '<i class="fas fa-sync-alt"></i> Actualizar Datos';
        }
    }

    // Función para procesar los datos crudos del API
    function processData(rawData) {
        const processed = [];
        yearOptions.clear();
        clientOptions = {}; // Resetear clientes
        allPeriods.clear();

        rawData.forEach((item, index) => {
            try {
                // 1. Procesar Fecha
                let fechaObj;
                const fechaInput = item['Fecha_x0020_Docto'] || item['FchEmis'] || ''; // Priorizar nombres comunes
                if (fechaInput) {
                    // Intentar diferentes formatos si es necesario, date-fns es más robusto
                    // Asumiendo formato ISO 8601 o similar que Date.parse entienda bien
                    fechaObj = new Date(fechaInput);
                    if (isNaN(fechaObj.getTime())) { // Fecha inválida
                        console.warn(`Fecha inválida encontrada: "${fechaInput}" en item ${index}. Usando fecha actual.`);
                        fechaObj = new Date();
                    }
                } else {
                    console.warn(`Fecha faltante en item ${index}. Usando fecha actual.`);
                    fechaObj = new Date(); // Fallback
                }
                const anio = fechaObj.getFullYear();
                const mes = String(fechaObj.getMonth() + 1).padStart(2, '0');
                const periodo = `${anio}-${mes}`;

                // 2. Tipo de Documento
                const tipoDoc = parseInt(item['Tipo_x0020_Doc'] || item['TipoDTE'] || 0, 10);
                const tipoDocTexto = DTE_MAP[tipoDoc] || `Desconocido (${tipoDoc})`;
                const esNotaCredito = tipoDoc === 61 || tipoDoc === 112; // Nota de Crédito Nacional o Exportación
                const esNotaDebito = tipoDoc === 56 || tipoDoc === 111; // Considerar Notas de Débito

                // 3. RUT y Razón Social
                let razonSocial = item['Razon_x0020_Social'] || item['RznSoc'] || 'N/A';
                let rut = 'N/A';
                // Intentar extraer RUT: XX.XXX.XXX-X o XXXXXXXX-X
                const rutMatch = razonSocial.match(/(\d{1,3}(?:\.\d{3})*\-[\dkK]|\d{7,8}-?[\dkK])/);
                if (rutMatch && rutMatch[0]) {
                    const potentialRut = rutMatch[0];
                    if (validateRutCL(potentialRut)) {
                        rut = formatRutCL(potentialRut);
                        // Opcional: Limpiar RUT de la razón social si se extrajo
                        // razonSocial = razonSocial.replace(potentialRut, '').replace('RUT:', '').trim();
                    } else {
                         console.warn(`RUT inválido encontrado "${potentialRut}" en: "${razonSocial}"`);
                         // Mantener el RUT extraído pero sin formato si falla la validación? O dejar N/A?
                         // rut = potentialRut; // Opción: mantener el valor extraído
                    }
                }
                 // Limpiar espacios extra en razón social
                 razonSocial = razonSocial.replace(/\s+/g, ' ').trim();


                // 4. Folio
                const folio = item.Folio || item.FolioDoc || 'N/A';

                // 5. Cálculo de Montos Tributarios (la parte más crítica)
                let montoNeto = 0, montoExento = 0, montoIVA = 0, montoTotal = 0;

                // Leer valores directos si existen (priorizar nombres LCV estándar)
                const rawTotal = parseFloat(item['MntTotal'] || item['Monto_x0020_total'] || item['MontoFacturaOriginal'] || 0);
                const rawExento = parseFloat(item['MntExe'] || item['MontoExento'] || 0);
                const rawNeto = parseFloat(item['MntNeto'] || item['MontoNetoReal'] || 0); // MontoNetoReal podría ser ya Neto - NC? Revisar.
                const rawIVA = parseFloat(item['IVA'] || 0);

                 // Determinar la mejor fuente para el total
                 montoTotal = rawTotal;

                // Lógica de cálculo:
                if (item['MntNeto'] && item['MntExe'] && item['IVA'] && item['MntTotal']) {
                     // Caso ideal: Tenemos todos los campos del LCV
                     montoNeto = parseFloat(item['MntNeto']);
                     montoExento = parseFloat(item['MntExe']);
                     montoIVA = parseFloat(item['IVA']);
                     montoTotal = parseFloat(item['MntTotal']);

                     // Validación cruzada
                     if (Math.abs(montoNeto + montoExento + montoIVA - montoTotal) > 1) { // Tolerancia de $1 por redondeo
                         console.warn(`Inconsistencia en montos (Item ${index}, Folio ${folio}): Neto(${montoNeto}) + Exe(${montoExento}) + IVA(${montoIVA}) != Total(${montoTotal}). Se usarán valores directos.`);
                         // Podríamos recalcular basado en el total si hay inconsistencia?
                         // Por ahora, confiamos en los datos si todos están presentes.
                     }
                } else if (montoTotal !== 0) {
                     // Caso común: Tenemos Total y quizás Exento, necesitamos calcular Neto e IVA
                     montoExento = rawExento; // Usar el exento leído si existe

                     if (montoTotal > 0 && montoExento >= 0 && montoTotal >= montoExento) {
                        const baseAfecta = montoTotal - montoExento;
                        if (baseAfecta > 0) {
                             // Calcular Neto e IVA a partir de la base afecta
                            montoNeto = baseAfecta / (1 + IVA_RATE);
                            montoIVA = montoNeto * IVA_RATE;

                             // Redondeo a 0 decimales como es común en CLP
                             montoNeto = Math.round(montoNeto);
                             montoIVA = Math.round(montoIVA);

                            // Ajustar total calculado para consistencia (puede diferir del original por redondeo)
                             montoTotal = montoNeto + montoExento + montoIVA;

                        } else {
                             // Si BaseAfecta es 0 o negativa, es un documento exento o con error
                             montoNeto = 0;
                             montoIVA = 0;
                             montoTotal = montoExento; // El total debería ser igual al exento
                        }
                     } else {
                         // Datos inconsistentes (Total < Exento, etc.)
                         console.warn(`Datos de monto inconsistentes (Item ${index}, Folio ${folio}): Total=${montoTotal}, Exento=${montoExento}. No se pueden calcular Neto/IVA.`);
                         montoNeto = 0; // O usar rawNeto si existe?
                         montoIVA = 0; // O usar rawIVA si existe?
                         // Mantener montoTotal como el leído.
                     }

                } else {
                     // No hay Total o es 0, intentar usar Neto/IVA/Exento si existen
                     montoNeto = rawNeto || 0;
                     montoExento = rawExento || 0;
                     montoIVA = rawIVA || 0;
                     montoTotal = montoNeto + montoExento + montoIVA; // Calcular total desde componentes
                     console.warn(`Total era 0 o faltante (Item ${index}, Folio ${folio}). Calculado Total=${montoTotal} desde componentes.`);
                }

                // Asegurarse que los montos no sean NaN
                montoNeto = isNaN(montoNeto) ? 0 : montoNeto;
                montoExento = isNaN(montoExento) ? 0 : montoExento;
                montoIVA = isNaN(montoIVA) ? 0 : montoIVA;
                montoTotal = isNaN(montoTotal) ? 0 : montoTotal;

                // Crear objeto procesado
                const processedItem = {
                    fecha: fechaObj,
                    anio: anio,
                    mes: mes, // '01', '02', ..., '12'
                    periodo: periodo, // 'YYYY-MM'
                    tipoDoc: tipoDoc,
                    tipoDocTexto: tipoDocTexto,
                    esNotaCredito: esNotaCredito, // Booleano
                    esNotaDebito: esNotaDebito, // Booleano (puede ser útil)
                    folio: folio,
                    rut: rut, // Formateado o 'N/A'
                    razonSocial: razonSocial,
                    montoNeto: montoNeto,
                    montoExento: montoExento,
                    montoIVA: montoIVA,
                    montoTotal: montoTotal,
                    // Guardar referencia al item original si se necesita depurar
                    // originalData: item
                };
                processed.push(processedItem);

                // Actualizar sets para filtros
                yearOptions.add(anio);
                if (rut !== 'N/A' && !clientOptions[rut]) { // Añadir solo si no existe ya
                    clientOptions[rut] = razonSocial; // Usar RUT como clave
                } else if (rut === 'N/A' && razonSocial !== 'N/A' && !clientOptions[razonSocial]) { // Si no hay RUT, usar Razon Social como clave
                    clientOptions[razonSocial] = razonSocial;
                }
                allPeriods.add(periodo);

            } catch (e) {
                console.error(`Error procesando item ${index}:`, item, e);
                 // Opcional: añadir un item con estado de error? O simplemente omitir?
            }
        });

        console.log(`Procesados ${processed.length} de ${rawData.length} items.`);
        return processed;
    }


    // Actualizar las opciones de los filtros desplegables
    function updateFilterOptions() {
        // --- Filtro de Año (Multiple) ---
        // Guardar selección actual si existe
        const selectedYears = Array.from(yearFilter.selectedOptions).map(opt => opt.value);
        // Limpiar opciones excepto la primera (si era un placeholder)
        // O simplemente limpiar todo y re-crear
        yearFilter.innerHTML = ''; // Limpiar completamente
        // Agregar años ordenados
        [...yearOptions].sort((a, b) => b - a).forEach(year => {
            const option = document.createElement('option');
            option.value = year;
            option.textContent = year;
            // Restaurar selección si estaba seleccionada
            if (selectedYears.includes(year.toString())) {
                option.selected = true;
            }
            yearFilter.appendChild(option);
        });
        // Si no había selección previa o las opciones cambiaron, no seleccionar nada por defecto

        // --- Filtro de Mes (Multiple) ---
        // No necesita actualizarse, las opciones son fijas. Solo asegurar que la selección se mantenga si aplica.
        const selectedMonths = Array.from(monthFilter.selectedOptions).map(opt => opt.value);
        Array.from(monthFilter.options).forEach(option => {
             option.selected = selectedMonths.includes(option.value);
        });


        // --- Filtro de Cliente (Single) ---
        const selectedClient = clientFilter.value; // Guardar selección actual
        // Limpiar opciones excepto "Todos"
        while (clientFilter.options.length > 1) {
            clientFilter.remove(1);
        }
        // Ordenar clientes por Razón Social (valor del objeto)
        const sortedClients = Object.entries(clientOptions)
            .sort(([, nameA], [, nameB]) => nameA.localeCompare(nameB));

        // Agregar clientes
        sortedClients.forEach(([key, name]) => {
             // key puede ser RUT formateado o Razón Social si no hay RUT
             // name es la Razón Social
            const option = document.createElement('option');
            option.value = key; // Usar la clave (RUT o Nombre) como valor
            // Mostrar "RUT - Nombre" si la clave es un RUT válido, sino solo Nombre
            if (validateRutCL(key)) { // Si la clave parece un RUT válido
                 option.textContent = `${key} - ${truncateText(name, 40)}`;
            } else {
                 option.textContent = truncateText(name, 50); // Solo nombre si la clave no es RUT
            }

            option.title = name; // Tooltip con nombre completo
            clientFilter.appendChild(option);
        });
        // Restaurar selección si aún existe
        if (clientOptions[selectedClient] || selectedClient === 'all') {
            clientFilter.value = selectedClient;
        } else {
            clientFilter.value = 'all'; // Volver a "Todos" si el cliente ya no está
        }
    }


    // Aplicar filtros seleccionados y actualizar la visualización completa
    function applyFilters() {
        // Leer selecciones múltiples de año y mes
        const selectedYears = Array.from(yearFilter.selectedOptions).map(opt => parseInt(opt.value, 10));
        const selectedMonths = Array.from(monthFilter.selectedOptions).map(opt => opt.value);
        const selectedClient = clientFilter.value; // Clave: RUT o Razón Social

        // Filtrar datos
        filteredData = allData.filter(item => {
            const yearMatch = selectedYears.length === 0 || selectedYears.includes(item.anio);
            const monthMatch = selectedMonths.length === 0 || selectedMonths.includes(item.mes);
            // Cliente: comparar con item.rut si selectedClient es un RUT, sino con item.razonSocial
            const clientMatch = selectedClient === 'all' ||
                                (validateRutCL(selectedClient) ? item.rut === selectedClient : item.razonSocial === selectedClient);

            return yearMatch && monthMatch && clientMatch;
        });

        console.log(`Filtrados ${filteredData.length} documentos.`);

        // Resetear paginación y ordenamiento (o mantener orden?)
        currentPage = 1;
        // Mantener el orden actual: sortData(); // Aplicar ordenamiento actual a los datos filtrados
        sortData(); // Re-aplicar ordenamiento actual a los nuevos datos filtrados

        // Actualizar todas las secciones de la UI
        updateStats();
        updateCharts(); // Esta función ahora llamará a las sub-funciones de gráficos
        updateTable();
        updateKeyMetrics(); // Actualizar métricas avanzadas
        updateTopClients(); // Actualizar top clientes
    }

    // Ordenar datos (función existente, revisar si necesita ajustes)
    function sortData() {
         if (!filteredData || filteredData.length === 0) return;

         filteredData.sort((a, b) => {
             let valueA = a[currentSortColumn];
             let valueB = b[currentSortColumn];

             // Manejar tipos de datos para ordenamiento
             if (currentSortColumn === 'fecha') {
                 valueA = valueA.getTime(); // Comparar como números
                 valueB = valueB.getTime();
             } else if (['montoNeto', 'montoExento', 'montoIVA', 'montoTotal', 'folio', 'tipoDoc'].includes(currentSortColumn)) {
                 // Orden numérico (folio también por si acaso)
                 valueA = Number(valueA) || 0;
                 valueB = Number(valueB) || 0;
             } else if (typeof valueA === 'string') {
                  // Orden de texto (insensible a mayúsculas)
                 valueA = valueA.toLowerCase();
                 valueB = valueB.toLowerCase();
             }
             // Para RUT, podríamos querer un orden numérico del cuerpo del RUT? Por ahora texto.

             // Comparación
             let comparison = 0;
             if (valueA > valueB) {
                 comparison = 1;
             } else if (valueA < valueB) {
                 comparison = -1;
             }

             return currentSortDirection === 'asc' ? comparison : (comparison * -1);
         });
    }


    // --- Funciones de Actualización de UI (updateStats, updateCharts, updateTable, etc.) ---
    // Estas funciones se modificarán / crearán en la Parte 3

    // --- FIN DE PARTE 2 DEL SCRIPT ---
</script>

<script>
    // --- PARTE 1 DEL SCRIPT (Variables Globales y Setup Inicial) ---
    // ... (Código de la Parte 1 del script va aquí arriba) ...
    // --- FIN DE PARTE 1 DEL SCRIPT ---

    // --- PARTE 2 DEL SCRIPT (Procesamiento de Datos y Filtros) ---
    // ... (Código de la Parte 2 del script va aquí arriba) ...
    // --- FIN DE PARTE 2 DEL SCRIPT ---

    // --- PARTE 3 DEL SCRIPT (Actualización de UI y Gráficos) ---

    // --- Funciones de Actualización de UI ---

    // Actualizar las tarjetas de estadísticas principales
    function updateStats() {
        let sumVentasBrutasPos = 0; // Suma (Neto+Exe+IVA) de Facturas/Débitos
        let sumTotalNC = 0; // Suma (Total) de Notas de Crédito
        let sumVentasNetasPos = 0; // Suma (Neto+Exe) de Facturas/Débitos
        let sumVentasNetasCred = 0; // Suma (Neto+Exe) de Notas de Crédito
        let sumIVADebito = 0; // Suma (IVA) de Facturas/Débitos
        let sumIVACredito = 0; // Suma (IVA) de Notas de Crédito
        let totalDocsVentaMonto = 0;
        let totalDocsVentaCount = 0;
        let totalNCMonto = 0;
        let totalNCCount = 0;
        const periodsInFilter = new Set();

        filteredData.forEach(item => {
            periodsInFilter.add(item.periodo); // Contar períodos únicos con datos filtrados

            if (item.esNotaCredito) {
                // Es Nota de Crédito
                totalNCMonto += item.montoTotal;
                totalNCCount++;
                sumTotalNC += item.montoTotal; // Para Venta Bruta
                sumVentasNetasCred += (item.montoNeto + item.montoExento); // Para Venta Neta
                sumIVACredito += item.montoIVA; // Para IVA Débito
            } else {
                // Es Factura, Nota de Débito u otro documento de venta/cargo
                totalDocsVentaMonto += item.montoTotal;
                totalDocsVentaCount++;
                sumVentasBrutasPos += (item.montoNeto + item.montoExento + item.montoIVA); // Para Venta Bruta
                sumVentasNetasPos += (item.montoNeto + item.montoExento); // Para Venta Neta
                sumIVADebito += item.montoIVA; // Para IVA Débito
            }
        });

        // Calcular métricas finales
        const ventasBrutas = sumVentasBrutasPos - sumTotalNC;
        const ventasNetas = sumVentasNetasPos - sumVentasNetasCred;
        const ivaDebitoFiscal = sumIVADebito - sumIVACredito;
        const totalPeriodos = periodsInFilter.size;
        const promedioMensual = totalPeriodos > 0 ? ventasNetas / totalPeriodos : 0;

        // Actualizar DOM
        document.getElementById('total-bruto').textContent = formatCurrency(ventasBrutas);
        document.getElementById('total-neto-calc').textContent = formatCurrency(ventasNetas);
        document.getElementById('total-iva-debito').textContent = formatCurrency(ivaDebitoFiscal);
        document.getElementById('total-facturado').textContent = formatCurrency(totalDocsVentaMonto);
        document.getElementById('total-facturado-subtitle').textContent = `${formatNumber(totalDocsVentaCount)} documento(s)`;
        document.getElementById('total-nc').textContent = formatCurrency(totalNCMonto);
        document.getElementById('total-nc-subtitle').textContent = `${formatNumber(totalNCCount)} documento(s)`;
        document.getElementById('promedio-mensual').textContent = formatCurrency(promedioMensual);
        document.getElementById('promedio-mensual-subtitle').textContent = `En ${totalPeriodos} ${totalPeriodos === 1 ? 'mes' : 'meses'} con actividad`;

         // Limpiar subtítulos de métricas calculadas (pueden ser largos)
         document.getElementById('total-bruto-subtitle').textContent = `(+) Neto+Exe+IVA Ventas / (-) Total NCs`;
         document.getElementById('total-neto-calc-subtitle').textContent = `(+) Neto+Exe Ventas / (-) Neto+Exe NCs`;
         document.getElementById('total-iva-debito-subtitle').textContent = `(+) IVA Ventas / (-) IVA NCs`;
    }

    // Función maestra para actualizar todos los gráficos
    function updateCharts() {
         // Destruir gráficos anteriores si existen para evitar solapamientos o errores
        if (monthlyComparisonChart) monthlyComparisonChart.destroy();
        if (salesTrendChart) salesTrendChart.destroy();
        if (distributionChart) distributionChart.destroy();
        if (yearlyTotalChart) yearlyTotalChart.destroy();

        if (filteredData.length === 0) {
            console.log("No hay datos filtrados para mostrar gráficos.");
            // Opcional: Mostrar mensajes de "sin datos" en los contenedores de gráficos
             document.getElementById('monthlyComparisonChart').innerHTML = '<div class="empty-state"><div class="empty-icon"><i class="fas fa-chart-bar"></i></div><div class="empty-title">No hay datos para el gráfico comparativo.</div></div>';
             document.getElementById('salesTrendChart').innerHTML = '<div class="empty-state"><div class="empty-icon"><i class="fas fa-chart-line"></i></div><div class="empty-title">No hay datos para el gráfico de tendencia.</div></div>';
             document.getElementById('distributionChart').innerHTML = '<div class="empty-state"><div class="empty-icon"><i class="fas fa-pie-chart"></i></div><div class="empty-title">No hay datos para el gráfico de distribución.</div></div>';
             document.getElementById('yearlyTotalChart').innerHTML = '<div class="empty-state"><div class="empty-icon"><i class="fas fa-signal"></i></div><div class="empty-title">No hay datos para el gráfico anual.</div></div>';
            return; // Salir si no hay datos
        }

        // Crear los nuevos gráficos
        updateMonthlyComparisonChart();
        updateSalesTrendChart();
        updateDistributionChart();
        updateYearlyTotalChart();
    }

    // 1. Gráfico Comparativo Mensual por Año (Barras Agrupadas) - NUEVO
    function updateMonthlyComparisonChart() {
        const ctx = document.getElementById('monthlyComparisonChart').getContext('2d');
        const salesByYearMonth = {}; // { YYYY: { MM: VentaNeta, ... }, ... }

        // Agrupar Ventas Netas por año y mes
        filteredData.forEach(item => {
            const year = item.anio;
            const month = item.mes; // '01', '02', etc.
            const ventaNetaItem = item.esNotaCredito ? -(item.montoNeto + item.montoExento) : (item.montoNeto + item.montoExento);

            if (!salesByYearMonth[year]) {
                salesByYearMonth[year] = {};
                // Inicializar todos los meses para este año con 0
                 for(let m=1; m<=12; m++) {
                     salesByYearMonth[year][String(m).padStart(2, '0')] = 0;
                 }
            }
            salesByYearMonth[year][month] += ventaNetaItem;
        });

        const years = Object.keys(salesByYearMonth).sort();
        const monthLabels = MESES; // Usar nombres completos de meses

        // Colores base (se pueden generar más si hay muchos años)
         const baseColors = [
            'rgba(54, 162, 235, 0.8)', 'rgba(255, 99, 132, 0.8)', 'rgba(75, 192, 192, 0.8)',
            'rgba(255, 206, 86, 0.8)', 'rgba(153, 102, 255, 0.8)', 'rgba(255, 159, 64, 0.8)',
            'rgba(60, 180, 75, 0.8)', 'rgba(230, 25, 75, 0.8)'
         ];
         const borderColors = baseColors.map(c => c.replace('0.8', '1'));


        const datasets = years.map((year, index) => {
            const yearData = [];
            for (let m = 1; m <= 12; m++) {
                const monthKey = String(m).padStart(2, '0');
                yearData.push(salesByYearMonth[year][monthKey] || 0);
            }
            return {
                label: year,
                data: yearData,
                backgroundColor: baseColors[index % baseColors.length],
                borderColor: borderColors[index % borderColors.length],
                borderWidth: 1,
                borderRadius: 4
            };
        });

        monthlyComparisonChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: monthLabels,
                datasets: datasets
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: { callback: value => formatCurrency(value) }
                    },
                    x: { grid: { display: false } }
                },
                plugins: {
                    tooltip: {
                         mode: 'index', // Mostrar tooltip para todas las barras del mismo mes
                         intersect: false,
                        callbacks: {
                            label: function(context) {
                                return `${context.dataset.label}: ${formatCurrency(context.raw)}`;
                            }
                        }
                    },
                    legend: { position: 'top' }
                }
            }
        });
    }


    // 2. Gráfico de Tendencia de Ventas Netas (Línea) - NUEVO/MODIFICADO
    function updateSalesTrendChart() {
        const ctx = document.getElementById('salesTrendChart').getContext('2d');
        const salesByPeriod = {}; // { 'YYYY-MM': VentaNeta, ... }

        // Agrupar por período
        filteredData.forEach(item => {
            const ventaNetaItem = item.esNotaCredito ? -(item.montoNeto + item.montoExento) : (item.montoNeto + item.montoExento);
            if (!salesByPeriod[item.periodo]) {
                salesByPeriod[item.periodo] = 0;
            }
            salesByPeriod[item.periodo] += ventaNetaItem;
        });

        const sortedPeriods = Object.keys(salesByPeriod).sort();
        const labels = sortedPeriods.map(period => {
             // Formatear 'YYYY-MM' para mostrar (e.g., 'Ene 2023')
             const [year, month] = period.split('-');
             return `${MESES[parseInt(month, 10) - 1].substring(0,3)} ${year}`;
        });
        const data = sortedPeriods.map(period => salesByPeriod[period]);

        salesTrendChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Ventas Netas Mensuales',
                    data: data,
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.1)',
                    fill: true,
                    tension: 0.1, // Suavizar la línea
                    pointRadius: 3,
                    pointHoverRadius: 5
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: { callback: value => formatCurrency(value) }
                    },
                    x: { grid: { display: false } }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `Ventas Netas: ${formatCurrency(context.raw)}`;
                            }
                        }
                    },
                    legend: { display: false } // Ocultar leyenda si solo hay una línea
                }
            }
        });
    }

    // 3. Gráfico de Distribución por Cliente (Pie) - MODIFICADO
    function updateDistributionChart() {
        const ctx = document.getElementById('distributionChart').getContext('2d');
        const salesByClient = {}; // { 'clienteKey': VentaNeta, ... } (key es RUT o RazonSocial)

        filteredData.forEach(item => {
            const key = item.rut !== 'N/A' ? item.rut : item.razonSocial;
            if (key === 'N/A') return; // Ignorar clientes sin RUT ni nombre

            const ventaNetaItem = item.esNotaCredito ? -(item.montoNeto + item.montoExento) : (item.montoNeto + item.montoExento);
            if (!salesByClient[key]) {
                salesByClient[key] = 0;
            }
            salesByClient[key] += ventaNetaItem;
        });

        // Filtrar clientes con ventas > 0 para el pie chart
        const positiveSalesClients = Object.entries(salesByClient).filter(([, total]) => total > 0);

        // Ordenar por ventas descendentes
        const sortedClients = positiveSalesClients.sort(([, totalA], [, totalB]) => totalB - totalA);

        const topN = 5; // Mostrar Top 5 + Otros
        const topClientsData = sortedClients.slice(0, topN);
        const otherClientsData = sortedClients.slice(topN);

        const labels = topClientsData.map(([key]) => {
             // Usar el nombre almacenado en clientOptions si existe, sino la clave
             const name = clientOptions[key] || key;
             return truncateText(name, 15); // Nombre corto para label
        });
        const data = topClientsData.map(([, total]) => total);

        // Agrupar "Otros"
        if (otherClientsData.length > 0) {
            labels.push('Otros');
            data.push(otherClientsData.reduce((sum, [, total]) => sum + total, 0));
        }

        // Colores para el gráfico pie
        const pieColors = [
            'rgba(54, 162, 235, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(255, 206, 86, 0.8)',
            'rgba(153, 102, 255, 0.8)', 'rgba(255, 159, 64, 0.8)', 'rgba(201, 203, 207, 0.8)' // Gris para 'Otros'
        ];

        distributionChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: pieColors.slice(0, data.length),
                    borderColor: pieColors.map(c => c.replace('0.8', '1')).slice(0, data.length),
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                const total = context.chart.getDatasetMeta(0).total; // Suma total del pie
                                const percentage = total > 0 ? (value / total) : 0;
                                return `${context.label}: ${formatCurrency(value)} (${formatPercent(percentage)})`;
                            },
                             // Mostrar nombre completo en título del tooltip
                             title: function(tooltipItems) {
                                 const index = tooltipItems[0].dataIndex;
                                 if (index < topClientsData.length) {
                                     const [key] = topClientsData[index];
                                     return clientOptions[key] || key; // Nombre completo
                                 }
                                 return tooltipItems[0].label; // 'Otros'
                             }
                        }
                    },
                    legend: { position: 'right', labels: { boxWidth: 12 } }
                }
            }
        });
    }

    // 4. Gráfico de Ventas Netas Anuales (Barras) - MODIFICADO
    function updateYearlyTotalChart() {
        const ctx = document.getElementById('yearlyTotalChart').getContext('2d');
        const salesByYear = {}; // { YYYY: VentaNeta, ... }

        filteredData.forEach(item => {
            const ventaNetaItem = item.esNotaCredito ? -(item.montoNeto + item.montoExento) : (item.montoNeto + item.montoExento);
            if (!salesByYear[item.anio]) {
                salesByYear[item.anio] = 0;
            }
            salesByYear[item.anio] += ventaNetaItem;
        });

        const sortedYears = Object.keys(salesByYear).sort();
        const labels = sortedYears;
        const data = sortedYears.map(year => salesByYear[year]);

        yearlyTotalChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Ventas Netas Anuales',
                    data: data,
                    backgroundColor: 'rgba(153, 102, 255, 0.7)',
                    borderColor: 'rgba(153, 102, 255, 1)',
                    borderWidth: 1,
                    borderRadius: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: { callback: value => formatCurrency(value) }
                    },
                    x: { grid: { display: false } }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `Ventas Netas ${context.label}: ${formatCurrency(context.raw)}`;
                            }
                        }
                    },
                    legend: { display: false }
                }
            }
        });
    }

    // Actualizar las métricas clave en la sección de análisis avanzado
    function updateKeyMetrics() {
        keyMetricsContainer.innerHTML = ''; // Limpiar contenedor
        keyMetricsEmptyMessage.classList.add('hidden'); // Ocultar mensaje vacío

        if (filteredData.length === 0) {
             keyMetricsEmptyMessage.classList.remove('hidden');
             keyMetricsEmptyMessage.querySelector('.empty-title').textContent = 'No hay datos para calcular métricas.';
            return;
        }

        // Calcular métricas basadas en Ventas Netas
        const ventasNetas = filteredData.reduce((sum, item) => {
            return sum + (item.esNotaCredito ? -(item.montoNeto + item.montoExento) : (item.montoNeto + item.montoExento));
        }, 0);

        // 1. Día con Mayor Venta Neta
        const ventasPorDia = {}; // { diaSemana: totalVentaNeta }
        const countPorDia = {};
        filteredData.forEach(item => {
             const dia = item.fecha.getDay(); // 0 = Domingo, 6 = Sábado
             const ventaNetaItem = item.esNotaCredito ? -(item.montoNeto + item.montoExento) : (item.montoNeto + item.montoExento);
             if (!ventasPorDia[dia]) ventasPorDia[dia] = 0;
             if (!countPorDia[dia]) countPorDia[dia] = 0;
             ventasPorDia[dia] += ventaNetaItem;
             countPorDia[dia]++;
        });
        let maxVentaDia = -Infinity;
        let maxDiaIndex = -1;
        for (const dia in ventasPorDia) {
            if (ventasPorDia[dia] > maxVentaDia) {
                maxVentaDia = ventasPorDia[dia];
                maxDiaIndex = parseInt(dia, 10);
            }
        }
        if (maxDiaIndex !== -1) {
            const diaNombre = DIAS_SEMANA[maxDiaIndex];
             keyMetricsContainer.innerHTML += `
                 <div class="analysis-metric">
                     <div class="metric-title">Día Pico (Vta. Neta)</div>
                     <div class="metric-value">${diaNombre}</div>
                     <div class="metric-info">${formatCurrency(maxVentaDia)} (${formatNumber(countPorDia[maxDiaIndex])} docs)</div>
                 </div>`;
        }

        // 2. Promedio Venta Neta por Documento de Venta (ignorando NC)
        const docsVenta = filteredData.filter(item => !item.esNotaCredito);
        const totalVentaNetaDocsVenta = docsVenta.reduce((sum, item) => sum + item.montoNeto + item.montoExento, 0);
        const promedioPorDocVenta = docsVenta.length > 0 ? totalVentaNetaDocsVenta / docsVenta.length : 0;
        keyMetricsContainer.innerHTML += `
             <div class="analysis-metric">
                 <div class="metric-title">Promedio por Doc. Venta</div>
                 <div class="metric-value">${formatCurrency(promedioPorDocVenta)}</div>
                 <div class="metric-info">Basado en ${formatNumber(docsVenta.length)} facturas/boletas</div>
             </div>`;


        // 3. Variación Anual (si hay varios años)
        const salesByYear = {};
        filteredData.forEach(item => {
            const ventaNetaItem = item.esNotaCredito ? -(item.montoNeto + item.montoExento) : (item.montoNeto + item.montoExento);
            if (!salesByYear[item.anio]) salesByYear[item.anio] = 0;
            salesByYear[item.anio] += ventaNetaItem;
        });
        const years = Object.keys(salesByYear).map(Number).sort();
        if (years.length > 1) {
            const lastYear = years[years.length - 1];
            const prevYear = years[years.length - 2];
            const salesLast = salesByYear[lastYear];
            const salesPrev = salesByYear[prevYear];
            if (salesPrev !== 0) {
                const variation = (salesLast - salesPrev) / Math.abs(salesPrev); // Usar Abs para evitar división por 0 si ventas previas son negativas
                const trendClass = variation > 0 ? 'trend-up' : variation < 0 ? 'trend-down' : '';
                keyMetricsContainer.innerHTML += `
                    <div class="analysis-metric">
                        <div class="metric-title">Variación Anual (Vta. Neta)</div>
                        <div class="metric-value ${trendClass}">${variation >= 0 ? '+' : ''}${formatPercent(variation)}</div>
                        <div class="metric-info">${lastYear} vs ${prevYear}</div>
                    </div>`;
            }
        }

        // 4. Concentración Top 3 Clientes (Ventas Netas)
        const salesByClient = {};
        filteredData.forEach(item => {
             const key = item.rut !== 'N/A' ? item.rut : item.razonSocial;
             if (key === 'N/A') return;
             const ventaNetaItem = item.esNotaCredito ? -(item.montoNeto + item.montoExento) : (item.montoNeto + item.montoExento);
             if (!salesByClient[key]) salesByClient[key] = 0;
             salesByClient[key] += ventaNetaItem;
        });
        const sortedClients = Object.entries(salesByClient)
             .filter(([, total]) => total > 0) // Considerar solo ventas positivas para concentración
             .sort(([, totalA], [, totalB]) => totalB - totalA);

        if (sortedClients.length > 0) {
             const top3Sales = sortedClients.slice(0, 3).reduce((sum, [, total]) => sum + total, 0);
             const totalPositiveSales = sortedClients.reduce((sum, [, total]) => sum + total, 0);
             const concentration = totalPositiveSales > 0 ? top3Sales / totalPositiveSales : 0;
             const top3Names = sortedClients.slice(0, 3).map(([key], index) => {
                 const name = clientOptions[key] || key;
                 return `${index + 1}. ${truncateText(name, 25)}`;
             }).join('<br>');

             keyMetricsContainer.innerHTML += `
                 <div class="analysis-metric">
                     <div class="metric-title">Concentración Top 3 (Vta. Neta)</div>
                     <div class="metric-value">${formatPercent(concentration)}</div>
                     <div class="metric-info">En clientes:<br>${top3Names || 'N/A'}</div>
                 </div>`;
        }

         // Si no se generó ninguna métrica, mostrar mensaje
         if(keyMetricsContainer.innerHTML === '') {
             keyMetricsEmptyMessage.classList.remove('hidden');
             keyMetricsEmptyMessage.querySelector('.empty-title').textContent = 'No hay suficientes datos para calcular métricas avanzadas.';
         }
    }


    // Actualizar la sección de top clientes
    function updateTopClients() {
        clientsContainer.innerHTML = ''; // Limpiar
        clientsEmptyMessage.classList.add('hidden');

        if (filteredData.length === 0) {
             clientsEmptyMessage.classList.remove('hidden');
             clientsEmptyMessage.querySelector('.empty-title').textContent = 'No hay datos para mostrar clientes.';
            return;
        }

        const clientData = {}; // { key: { total: VentaNeta, count: numDocs }, ... }
        filteredData.forEach(item => {
            const key = item.rut !== 'N/A' ? item.rut : item.razonSocial;
            if (key === 'N/A') return;

            if (!clientData[key]) {
                clientData[key] = { total: 0, count: 0 };
            }
            const ventaNetaItem = item.esNotaCredito ? -(item.montoNeto + item.montoExento) : (item.montoNeto + item.montoExento);
            clientData[key].total += ventaNetaItem;
            clientData[key].count++;
        });

        // Ordenar por Venta Neta descendente
        const sortedClients = Object.entries(clientData).sort(([, dataA], [, dataB]) => dataB.total - dataA.total);

        // Total Ventas Netas para calcular porcentaje
        const totalVentasNetas = sortedClients.reduce((sum, [, data]) => sum + data.total, 0);

        // Tomar Top 3
        const top3Clients = sortedClients.slice(0, 3);

        if (top3Clients.length === 0) {
            clientsEmptyMessage.classList.remove('hidden');
            clientsEmptyMessage.querySelector('.empty-title').textContent = 'No se encontraron clientes con ventas netas positivas.';
            return;
        }


        top3Clients.forEach(([key, data], index) => {
            const name = clientOptions[key] || key; // Nombre completo
            const percentage = totalVentasNetas > 0 ? data.total / totalVentasNetas : 0; // Porcentaje del total de ventas netas

            const card = document.createElement('div');
            card.className = 'client-card';
            card.innerHTML = `
                <div class="client-header">
                    <div class="client-name" title="${name}">${truncateText(name, 35)}</div>
                    <div class="client-rank">${index + 1}</div>
                </div>
                <div class="client-info">${formatNumber(data.count)} documento(s)</div>
                <div class="client-amount">${formatCurrency(data.total)}</div>
                <div class="client-percentage">${formatPercent(percentage)} del total filtrado</div>
                <div class="client-progress">
                    <div class="client-progress-bar" style="width: ${Math.max(0, Math.min(100, percentage * 100))}%;"></div>
                </div>
            `;
            clientsContainer.appendChild(card);
        });
    }


    // Actualizar la tabla de facturas/documentos
    function updateTable() {
        invoiceTableBody.innerHTML = ''; // Limpiar tabla

        if (filteredData.length === 0) {
             invoiceTableBody.innerHTML = `<tr><td colspan="9"><div class="empty-state"><div class="empty-icon"><i class="fas fa-file-invoice"></i></div><div class="empty-title">No se encontraron documentos</div><div class="empty-message">Ajuste los filtros o cargue nuevos datos.</div></div></td></tr>`;
            updatePagination(0); // Actualizar paginación para mostrar 0 resultados
            return;
        }


        const totalPages = Math.ceil(filteredData.length / rowsPerPage);
        currentPage = Math.max(1, Math.min(currentPage, totalPages)); // Asegurar que currentPage sea válido

        const startIndex = (currentPage - 1) * rowsPerPage;
        const endIndex = Math.min(startIndex + rowsPerPage, filteredData.length);
        const pageData = filteredData.slice(startIndex, endIndex);

        pageData.forEach(item => {
            const row = document.createElement('tr');
            // Aplicar clase si es Nota de Crédito
            if (item.esNotaCredito) {
                row.classList.add('nota-credito');
            }

            // Formatear fecha DD/MM/YYYY
            const fechaFormateada = `${String(item.fecha.getDate()).padStart(2, '0')}/${String(item.fecha.getMonth() + 1).padStart(2, '0')}/${item.fecha.getFullYear()}`;

            row.innerHTML = `
                <td>${fechaFormateada}</td>
                <td title="${item.tipoDocTexto}">${truncateText(item.tipoDocTexto, 20)}</td>
                <td>${item.folio}</td>
                <td>${item.rut}</td>
                <td title="${item.razonSocial}" class="cell-razonsocial">${truncateText(item.razonSocial, 30)}</td>
                <td>${formatCurrency(item.montoNeto)}</td>
                <td>${formatCurrency(item.montoExento)}</td>
                <td>${formatCurrency(item.montoIVA)}</td>
                <td>${formatCurrency(item.montoTotal)}</td>
            `;
            invoiceTableBody.appendChild(row);
        });

        updatePagination(totalPages); // Actualizar controles de paginación
    }

    // Actualizar los controles de paginación (mejorada)
    function updatePagination(totalPages) {
        pagination.innerHTML = ''; // Limpiar paginación anterior

        const totalItems = filteredData.length;
        if (totalItems === 0 && totalPages === 0) {
             pagination.innerHTML = '<span class="pagination-info">No hay documentos para mostrar</span>';
             return;
        }
         if (totalPages <= 1) {
              pagination.innerHTML = `<span class="pagination-info">Mostrando ${totalItems} documento(s)</span>`;
              return; // No mostrar botones si solo hay una página
         }


        // Texto informativo
        const startItem = (currentPage - 1) * rowsPerPage + 1;
        const endItem = Math.min(startItem + rowsPerPage - 1, totalItems);
        const infoText = document.createElement('span');
        infoText.className = 'pagination-info';
        infoText.textContent = `Mostrando ${startItem}-${endItem} de ${formatNumber(totalItems)} documentos`;
        pagination.appendChild(infoText);

        // Contenedor para botones
        const btnContainer = document.createElement('div');
        btnContainer.style.display = 'flex';
        btnContainer.style.gap = '5px';


        // Botón 'Primera' y 'Anterior'
        if (currentPage > 1) {
             btnContainer.appendChild(createPageButton(1, '&laquo; Primera'));
             btnContainer.appendChild(createPageButton(currentPage - 1, '&lsaquo; Ant'));
        } else {
             // Deshabilitados
             btnContainer.appendChild(createPageButton(1, '&laquo; Primera', true));
             btnContainer.appendChild(createPageButton(1, '&lsaquo; Ant', true));
        }

        // Números de página (con elipsis)
        const maxPagesToShow = 5; // Máximo de botones de número a mostrar
        let startPage, endPage;

        if (totalPages <= maxPagesToShow) {
            startPage = 1;
            endPage = totalPages;
        } else {
             // Calcular rango con elipsis
            const maxPagesBeforeCurrent = Math.floor((maxPagesToShow - 3) / 2); // -3 por Primera, Última, Actual
            const maxPagesAfterCurrent = Math.ceil((maxPagesToShow - 3) / 2);

            if (currentPage <= maxPagesBeforeCurrent + 1) { // Cerca del inicio
                startPage = 1;
                endPage = maxPagesToShow - 1;
                 btnContainer.appendChild(createPageButton(1)); // Botón 1
                 for (let i = 2; i <= endPage; i++) btnContainer.appendChild(createPageButton(i));
                 btnContainer.appendChild(createPageEllipsis()); // ...
                 btnContainer.appendChild(createPageButton(totalPages)); // Última
            } else if (currentPage >= totalPages - maxPagesAfterCurrent) { // Cerca del final
                startPage = totalPages - (maxPagesToShow - 2);
                endPage = totalPages;
                 btnContainer.appendChild(createPageButton(1)); // Primera
                 btnContainer.appendChild(createPageEllipsis()); // ...
                 for (let i = startPage; i <= totalPages; i++) btnContainer.appendChild(createPageButton(i));
            } else { // En el medio
                startPage = currentPage - maxPagesBeforeCurrent;
                endPage = currentPage + maxPagesAfterCurrent;
                 btnContainer.appendChild(createPageButton(1)); // Primera
                 btnContainer.appendChild(createPageEllipsis()); // ...
                 for (let i = startPage; i <= endPage; i++) btnContainer.appendChild(createPageButton(i));
                 btnContainer.appendChild(createPageEllipsis()); // ...
                 btnContainer.appendChild(createPageButton(totalPages)); // Última
            }
        }

        // Botón 'Siguiente' y 'Última'
        if (currentPage < totalPages) {
             btnContainer.appendChild(createPageButton(currentPage + 1, 'Sig &rsaquo;'));
             btnContainer.appendChild(createPageButton(totalPages, 'Última &raquo;'));
        } else {
             // Deshabilitados
             btnContainer.appendChild(createPageButton(totalPages, 'Sig &rsaquo;', true));
             btnContainer.appendChild(createPageButton(totalPages, 'Última &raquo;', true));
        }

         pagination.appendChild(btnContainer); // Añadir contenedor de botones
    }

    // Helper para crear botones de paginación
    function createPageButton(page, text, disabled = false) {
        const btn = document.createElement('button');
        btn.className = 'page-btn';
        btn.innerHTML = text !== undefined ? text : page;
        btn.disabled = disabled;
        if (page === currentPage && text === undefined) { // Marcar página actual solo si es número
            btn.classList.add('active-page');
        }
        if (!disabled) {
            btn.addEventListener('click', () => {
                currentPage = page;
                updateTable();
            });
        }
        return btn;
    }
     // Helper para crear elipsis
     function createPageEllipsis() {
         const span = document.createElement('span');
         span.className = 'page-ellipsis';
         span.innerHTML = '&hellip;';
         return span;
     }

    // --- FIN DE PARTE 3 DEL SCRIPT ---
</script>
